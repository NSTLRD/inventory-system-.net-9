version: '3.8'

networks:
  ms-net:
    driver: bridge

services:
  # --- Infraestructura ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    networks:
      - ms-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    networks:
      - ms-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafkaui
    networks:
      - ms-net
    depends_on:
     - kafka
    ports:
     - "8088:8080" # Accede en http://localhost:8088
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  postgres-products:
    image: postgres:15
    container_name: postgres-products
    networks:
      - ms-net
    env_file: .env
    environment:
      POSTGRES_DB: productsdb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - products-data:/var/lib/postgresql/data

  postgres-inventory:
    image: postgres:15
    container_name: postgres-inventory
    networks:
      - ms-net
    env_file: .env
    environment:
      POSTGRES_DB: inventorydb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - inventory-data:/var/lib/postgresql/data

  # --- Microservicios ---
  products.api:
    build:
      context: ./ms-products
      dockerfile: Dockerfile
    container_name: products.api
    networks:
      - ms-net
    env_file: .env
    depends_on:
      postgres-products:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "5001:8080"
    environment:
      ConnectionStrings__Default: "Host=postgres-products;Port=5432;Database=productsdb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Kafka__BootstrapServers: "kafka:9092"
      Kafka__Topic: "product-events"

  inventory.api:
    build:
      context: ./ms-inventory
      dockerfile: Dockerfile
    container_name: inventory.api
    networks:
      - ms-net
    env_file: .env
    depends_on:
      postgres-inventory:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "5000:8080"
    environment:
      ConnectionStrings__Default: "Host=postgres-inventory;Port=5432;Database=inventorydb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Kafka__BootstrapServers: "kafka:9092"
      Kafka__Topic: "product-events"
      Kafka__GroupId: "inventory-group"

volumes:
  products-data:
  inventory-data:
